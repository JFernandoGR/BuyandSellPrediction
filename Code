# Importación de librerías

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from sklearn.cluster import KMeans
from sklearn import metrics
from scipy.spatial.distance import euclidean

# Peak Detection Functions #

def _datacheck_peakdetect(x_axis, y_axis):
    if x_axis is None:
        x_axis = range(len(y_axis))
    
    if len(y_axis) != len(x_axis):
        raise ValueError( 
                "Input vectors y_axis and x_axis must have same length")
    
    #needs to be a numpy array
    y_axis = np.array(y_axis)
    x_axis = np.array(x_axis)
    return x_axis, y_axis


def peakdetect(y_axis, x_axis = None, lookahead = 1, delta=0):
    """
    Converted from/based on a MATLAB script at: 
    http://billauer.co.il/peakdet.html
    
    function for detecting local maxima and minima in a signal.
    Discovers peaks by searching for values which are surrounded by lower
    or larger values for maxima and minima respectively
    
    keyword arguments:
    y_axis -- A list containing the signal over which to find peaks
    
    x_axis -- A x-axis whose values correspond to the y_axis list and is used
        in the return to specify the position of the peaks. If omitted an
        index of the y_axis is used.
        (default: None)
    
    lookahead -- distance to look ahead from a peak candidate to determine if
        it is the actual peak
        (default: 200) 
        '(samples / period) / f' where '4 >= f >= 1.25' might be a good value
    
    delta -- this specifies a minimum difference between a peak and
        the following points, before a peak may be considered a peak. Useful
        to hinder the function from picking up false peaks towards to end of
        the signal. To work well delta should be set to delta >= RMSnoise * 5.
        (default: 0)
            When omitted delta function causes a 20% decrease in speed.
            When used Correctly it can double the speed of the function
    
    
    return: two lists [max_peaks, min_peaks] containing the positive and
        negative peaks respectively. Each cell of the lists contains a tuple
        of: (position, peak_value) 
        to get the average peak value do: np.mean(max_peaks, 0)[1] on the
        results to unpack one of the lists into x, y coordinates do: 
        x, y = zip(*max_peaks)
    """
    max_peaks = []
    min_peaks = []
    dump = []   #Used to pop the first hit which almost always is false
       
    # check input data
    x_axis, y_axis = _datacheck_peakdetect(x_axis, y_axis)
    # store data length for later use
    length = len(y_axis)
    
    
    #perform some checks
    if lookahead < 1:
        raise ValueError("Lookahead must be '1' or above in value")
    if not (np.isscalar(delta) and delta >= 0):
        raise ValueError("delta must be a positive number")
    
    #maxima and minima candidates are temporarily stored in
    #mx and mn respectively
    mn, mx = np.Inf, -np.Inf
    
    #Only detect peak if there is 'lookahead' amount of points after it
    for index, (x, y) in enumerate(zip(x_axis[:-lookahead], y_axis[:-lookahead])):
        if y > mx:
            mx = y
            mxpos = x
        if y < mn:
            mn = y
            mnpos = x
        
        ####look for max####
        if y < mx-delta and mx != np.Inf:
            #Maxima peak candidate found
            #look ahead in signal to ensure that this is a peak and not jitter
            if y_axis[index:index+lookahead].max() < mx:
                max_peaks.append([mxpos, mx])
                dump.append(True)
                #set algorithm to only find minima now
                mx = np.Inf
                mn = np.Inf
                if index+lookahead >= length:
                    #end is within lookahead no more peaks can be found
                    break
                continue
            #else:  #slows shit down this does
            #    mx = ahead
            #    mxpos = x_axis[np.where(y_axis[index:index+lookahead]==mx)]
        
        ####look for min####
        if y > mn+delta and mn != -np.Inf:
            #Minima peak candidate found 
            #look ahead in signal to ensure that this is a peak and not jitter
            if y_axis[index:index+lookahead].min() > mn:
                min_peaks.append([mnpos, mn])
                dump.append(False)
                #set algorithm to only find maxima now
                mn = -np.Inf
                mx = -np.Inf
                if index+lookahead >= length:
                    #end is within lookahead no more peaks can be found
                    break
            #else:  #slows shit down this does
            #    mn = ahead
            #    mnpos = x_axis[np.where(y_axis[index:index+lookahead]==mn)]
    
    
    #Remove the false hit on the first value of the y_axis
    try:
        if dump[0]:
            max_peaks.pop(0)
        else:
            min_peaks.pop(0)
        del dump
    except IndexError:
        #no peaks were found, should the function return empty lists?
        pass
        
    return [max_peaks, min_peaks]

# Technical Analysis Indicators
  
def price_change(x, change):
    our_range = range(len(x))[change :]
    empty_list = [None] * (change)
    sub_result = [(x[i]-x[i- change]) for i in our_range]
    return pd.Series(np.array(empty_list + sub_result))

def SMA(x, smaPeriod):
    j = next(i for i, x in enumerate(x) if x is not None)
    our_range = range(len(x))[j + smaPeriod - 1:]
    empty_list = [None] * (j + smaPeriod - 1)
    sub_result = [np.mean(x[i - smaPeriod + 1: i]) for i in our_range]
    return pd.Series(np.array(empty_list + sub_result))

def ROC(x, change):
    our_range = range(len(x))[change :]
    empty_list = [None] * (change)
    sub_result = [(x[i]-x[i- change])/(x[i- change]) for i in our_range]
    return pd.Series(np.array(empty_list + sub_result))

def ATR(close,high,low,n):  
    ATRInit = [max(high[i]-low[i],abs(high[i]-close[i- 1]),abs(low[i]-close[i- 1])) for i in range(1,n + 1)]
    ATRInit = sum(ATRInit)/(n)
    ATR = []
    for i in range(n + 1,len(close)): # Desde n+1 hasta len(close)
        TR = max(high[i]-low[i],abs(high[i]-close[i- 1]),abs(low[i]-close[i- 1]))
        if i == (n + 1):
          ATRn = (TR + ATRInit*(n-1))/n
        else:
          ATRn = (TR + ATR[i-2-n]*(n-1))/n
        ATR.append(ATRn)
    empty_list = [None] * (n)
    ATR = pd.Series(np.array(empty_list + [ATRInit] + ATR))  
    return ATR

def STO(close, high, low, n):
    if (max(high[:n])-min(low[:n]))!=0:
       STOInit = ((close[n]-min(low[:n]))/(max(high[:n])-min(low[:n])))*100
    else: 
       STOInit = 0
    STO = []
    for i in range(n + 1,len(close)):
        if (max(high[i-n+1:i+1])-min(low[i-n+1:i+1]))!=0:
           STO.append(((close[i]-min(low[i-n+1:i+1]))/(max(high[i-n+1:i+1])-min(low[i-n+1:i+1])))*100)
        else:
           STO.append(0)   
    empty_list = [None] * (n)
    STO = pd.Series(np.array(empty_list + [STOInit] + STO))
    # Se buscan valores anteriores dada la baja liquidez del mercado en ciertas fechas.
    nullP = STO[pd.isnull(STO)].index
    nullP = nullP[(nullP-1)>n]
    # En caso de que la baja liquidez se preserve durante varios días, tomar el último valor disponible
    while len(nullP)>0:
          STO[nullP]=STO[nullP-1]
          nullP = STO[pd.isnull(STO)].index
          nullP = nullP[(nullP-1)>n]
    return STO

#Relative Strength Index  
def RSI(x, n):
    pI = np.mean(np.array(x[0:n+1]))
    # RSIInit = 100*(1-(1/(1+(pI/pI))))
    RSIInit = 50
    RSI = []
    Dt =  []
    Ut =  []
    for i in range(n + 1,len(x)): # Desde n+1 hasta len(close)
        if i == (n + 1):
          Dt.append((1/float(n))*max(0,x[i-1]-x[i]) + pI*(1-(1/n)))
          Ut.append((1/float(n))*max(0,x[i]-x[i-1]) + pI*(1-(1/n)))
        else:
          Dt.append((1/float(n))*max(0,x[i-1]-x[i]) + Dt[i-2-n]*(1-(1/n)))
          Ut.append((1/float(n))*max(0,x[i]-x[i-1]) + Ut[i-2-n]*(1-(1/n)))
        RSIn = 100*(1-(1/(1+(Ut[i-1-n]/Dt[i-1-n])))) 
        RSI.append(RSIn)  
    empty_list = [None] * (n)
    RSI = pd.Series(np.array(empty_list + [RSIInit] + RSI))    
    return RSI

def CCI(close,high,low,n):
    TP = (high[n-1]+low[n-1]+close[n-1])/3
    TPh = (high[:n]+low[:n]+close[:n])/3
    MD = np.mean(abs(TPh - TPh.mean()))
    SMATP = SMA(TPh,n)
    if ((TP - SMATP[-1:]).all() !=0) and MD!=0:
       CCIInit = np.float((TP - SMATP[-1:])/(0.015*MD))
    elif MD==0:
       CCIInit = 0
    else:
       CCIInit = 0
    CCI = []
    for i in range(n,len(close)):
        TP = (high[i]+low[i]+close[i])/3
        TPh = (high[i-n+1:i+1]+low[i-n+1:i+1]+close[i-n+1:i+1])/3
        MD = np.mean(abs(TPh - TPh.mean()))
        SMATP = SMA(TPh,n)
        if ((TP - SMATP[-1:]).all() !=0) and MD!=0:
          CCI.append(np.float((TP - SMATP[-1:])/(0.015*MD)))
        # En caso de baja liquidez, se muestran valores iguales a 0
        elif MD==0:
          CCI.append(0)
        else:
          CCI.append(0)
    empty_list = [None] * (n-1)
    CCI = pd.Series(np.array(empty_list + [CCIInit] + CCI))  
    return CCI
